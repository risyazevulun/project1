<program>          ::= <statements>

<statements>       ::= <statement> (NEWLINE+ <statement>)*

<statement>        ::= "return" <expr>? 
                     | "continue"
                     | "break"
                     | <expr>

<expr>             ::= "var" <identifier> "=" <expr>
                     | <comp-expr> (("and" | "or") <comp-expr>)*

<comp-expr>        ::= "not" <comp-expr>
                     | <arith-expr> (("<" | ">" | "==" | "<=" | ">=") <arith-expr>)*

<arith-expr>       ::= <term> (("+" | "-") <term>)*

<term>             ::= <factor> (("*" | "/" | "%") <factor>)*

<factor>           ::= ("+" | "-") <factor>
                     | <power>

<power>            ::= <call> ("^" <factor>)*

<call>             ::= <atom> ("(" (<expr> ("," <expr>)*)? ")")?

<atom>             ::= <number>
                     | <string>
                     | <identifier>
                     | "(" <expr> ")"
                     | <list-expr>
                     | <if-expr>
                     | <for-expr>
                     | <while-expr>
                     | <func-def>

<list-expr>        ::= "[" (<expr> ("," <expr>)*)? "]"

<if-expr>          ::= "if" <expr> "then" <statement> <if-expr-b>? <if-expr-c>?
                     | NEWLINE <statements> "end"

<if-expr-b>        ::= "elif" <expr> "then" <statement> <if-expr-b>? <if-expr-c>?
                     | NEWLINE <statements> "end"

<if-expr-c>        ::= "else" <statement>
                     | NEWLINE <statements> "end"

<for-expr>         ::= "for" <identifier> "=" <expr> "to" <expr> ("step" <expr>)? "then" <statement>
                     | NEWLINE <statements> "end"

<while-expr>       ::= "while" <expr> "then" <statement>
                     | NEWLINE <statements> "end"

<func-def>         ::= "fun" <identifier>? "(" (<identifier> ("," <identifier>)*)? ")" ("->" <expr>)
                     | NEWLINE <statements> "end"

<number>           ::= <int> | <float>

<int>              ::= <digit>+

<float>            ::= <digit>+ "." <digit>+

<string>           ::= '"' .*? '"'

<identifier>       ::= <letter> (<letter> | <digit>)*

<letter>           ::= "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" | "_"

<digit>            ::= "0" | "1" | ... | "9"
